Problem Statement:

Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 

Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 

Constraints:

The input must be a binary string of length 32.







Solution 1:

class Solution {
public:
    int hammingWeight(uint32_t n) {
        //convert the unsigned integer to its binary representation
        string binary = bitset<32>(n).to_string();
        return count(binary.begin(), binary.end(), '1');
    }
};


//The time complexity of the above solution is O(1), which is constant time. This is because the size of the input, which is a 32-bit unsigned integer, is fixed.

// S(n) - O(1) we use 32 bytes to store the binary string, as the input is a 32-bit unsigned integer.


//  We specify a bitset size of 32 bits using the template argument bitset<32>. We then call the to_string() function to convert the binary representation to a string.

// Finally, we use the count() function from the <algorithm> library to count the number of 1s in the string. The count() function takes the range [binary.begin(), binary.end()) and the value '1' as arguments, and returns the number of occurrences of '1' in the range.




-------------------------------------------------------------

Solution 2:

//Using bit manipulation

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while(n > 0) {
            if(n & 1) {
                count++;
            }
            n >>= 1;
        }
        return count;
    }
};


// The time complexity of the above solution is O(log n), where n is the input number. This is because in the worst case scenario, when all bits of the input are 1's, we need to iterate over all the bits in the input, which is of the order of log n (base 2). The time complexity is dominated by the number of bits in the input number.

// The space complexity of the above solution is O(1), which is constant space. This is because we only use a constant amount of memory to store the count of the number of 1 bits, and a variable to store the shifted value of the input number.


// Example with dry run:

The binary representation of n = 11 is 1011. Here's how the code processes this input:

-> Initialize count to 0.

-> Check if n is greater than 0. Since 11 is greater than 0, the loop condition is true and we enter the loop.

-> Check if the least significant bit of n is 1. We use the bitwise AND operator & to mask n with 1, which has the binary representation 0001. The result is 1011 & 0001 = 0001, which is non-zero, so the if statement is true and we increment count to 1.

-> Shift n one bit to the right using the right-shift operator >>=. The binary representation of n is now 0101.

-> Check if the least significant bit of n is 1. The result of n & 1 is 1, so we increment count to 2.
Shift n one bit to the right. The binary representation of n is now 0010.

-> Check if the least significant bit of n is 1. The result of n & 1 is 0, so we do not increment count.
Shift n one bit to the right. The binary representation of n is now 0001.

-> Check if the least significant bit of n is 1. The result of n & 1 is 1, so we increment count to 3.
Shift n one bit to the right. The binary representation of n is now 0000.

-> Since n is now equal to 0, the loop condition is false and we exit the loop.
Return count, which is 3.

-> So the output of the function for the input n = 11 is 3, which is the correct number of 1 bits in the binary representation of 11.